Backport of:

From bdc6c63c80b55bcbaa66b5fde31c1cb1d09a41eb Mon Sep 17 00:00:00 2001
From: "dtucker@openbsd.org" <dtucker@openbsd.org>
Date: Thu, 24 Jan 2019 16:52:17 +0000
Subject: [PATCH] upstream: Have progressmeter force an update at the beginning
 and

end of each transfer.  Fixes the problem recently introduces where very quick
transfers do not display the progressmeter at all.  Spotted by naddy@

OpenBSD-Commit-ID: 68dc46c259e8fdd4f5db3ec2a130f8e4590a7a9a
---
 progressmeter.c | 13 +++++--------
 progressmeter.h |  4 ++--
 scp.c           |  4 ++--
 sftp-client.c   |  4 ++--
 4 files changed, 11 insertions(+), 14 deletions(-)

Index: openssh-6.6p1/progressmeter.c
===================================================================
--- openssh-6.6p1.orig/progressmeter.c	2019-01-31 11:17:55.855434181 -0500
+++ openssh-6.6p1/progressmeter.c	2019-01-31 11:17:55.851434175 -0500
@@ -59,9 +59,6 @@ static void format_rate(char *, int, off
 static void sig_winch(int);
 static void setscreensize(void);
 
-/* updates the progressmeter to reflect the current state of the transfer */
-void refresh_progress_meter(void);
-
 /* signal handler for updating the progress meter */
 static void sig_alarm(int);
 
@@ -120,7 +117,7 @@ format_size(char *buf, int size, off_t b
 }
 
 void
-refresh_progress_meter(void)
+refresh_progress_meter(int force_update)
 {
 	char buf[MAX_WINSIZE + 1];
 	time_t now;
@@ -132,7 +129,7 @@ refresh_progress_meter(void)
 	int hours, minutes, seconds;
 	int file_len;
 
-	if ((!alarm_fired && !win_resized) || !can_output())
+	if ((!force_update && !alarm_fired && !win_resized) || !can_output())
 		return;
 	alarm_fired = 0;
 
@@ -255,7 +252,7 @@ start_progress_meter(char *f, off_t file
 	bytes_per_second = 0;
 
 	setscreensize();
-	refresh_progress_meter();
+	refresh_progress_meter(1);
 
 	signal(SIGALRM, sig_alarm);
 	signal(SIGWINCH, sig_winch);
@@ -272,7 +269,7 @@ stop_progress_meter(void)
 
 	/* Ensure we complete the progress */
 	if (cur_pos != end_pos)
-		refresh_progress_meter();
+		refresh_progress_meter(1);
 
 	atomicio(vwrite, STDOUT_FILENO, "\n", 1);
 }
Index: openssh-6.6p1/progressmeter.h
===================================================================
--- openssh-6.6p1.orig/progressmeter.h	2019-01-31 11:17:55.855434181 -0500
+++ openssh-6.6p1/progressmeter.h	2019-01-31 11:18:07.575451909 -0500
@@ -24,5 +24,5 @@
  */
 
 void	start_progress_meter(char *, off_t, off_t *);
-void	refresh_progress_meter(void);
+void	refresh_progress_meter(int);
 void	stop_progress_meter(void);
Index: openssh-6.6p1/scp.c
===================================================================
--- openssh-6.6p1.orig/scp.c	2019-01-31 11:17:55.855434181 -0500
+++ openssh-6.6p1/scp.c	2019-01-31 11:17:55.851434175 -0500
@@ -559,7 +559,7 @@ scpio(void *_cnt, size_t s)
 	off_t *cnt = (off_t *)_cnt;
 
 	*cnt += s;
-	refresh_progress_meter();
+	refresh_progress_meter(0);
 	if (limit_kbps > 0)
 		bandwidth_limit(&bwlimit, s);
 	return 0;
Index: openssh-6.6p1/sftp-client.c
===================================================================
--- openssh-6.6p1.orig/sftp-client.c	2019-01-31 11:17:55.855434181 -0500
+++ openssh-6.6p1/sftp-client.c	2019-01-31 11:17:55.851434175 -0500
@@ -93,7 +93,7 @@ sftpio(void *_bwlimit, size_t amount)
 {
 	struct bwlimit *bwlimit = (struct bwlimit *)_bwlimit;
 
-	refresh_progress_meter();
+	refresh_progress_meter(0);
 	if (bwlimit != NULL)
 		bandwidth_limit(bwlimit, amount);
 	return 0;
